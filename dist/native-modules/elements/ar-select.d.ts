import { StyleEngine, UxComponent } from '@aurelia-ux/core';
import { ArSelectTheme } from './ar-select-theme';
import { EventAggregator } from 'aurelia-event-aggregator';
import { ArOption } from './ar-option';
export declare class ArSelect implements UxComponent {
    private element;
    styleEngine: StyleEngine;
    private eventAggregator;
    theme: ArSelectTheme;
    value: any | Array<any>;
    multiple: boolean;
    allowAny: boolean;
    displaySearch: 'auto' | 'hidden' | 'always';
    searchTrigger: number;
    placeholder: string;
    addExtraValueButtonText: string;
    wrap: boolean;
    disabled: boolean;
    private options;
    private focused;
    private mapContainer;
    private handleResize;
    private mapHeight;
    private log;
    private selectorContainer;
    private originalValue;
    private extraValues;
    private filter;
    private dialog;
    private dialogElement;
    compareValues: Function;
    constructor(element: HTMLElement, styleEngine: StyleEngine, eventAggregator: EventAggregator);
    bind(): void;
    attached(): void;
    detached(): void;
    zIndex: number;
    setZIndex(): void;
    moveToBodyTag(): void;
    removeFromBodyTag(): void;
    themeChanged(newValue: any): void;
    optionsChanged(): void;
    valueChanged(): void;
    checkAppropriateOptions(): void;
    focus(): void;
    detectExtraValues(): void;
    closeSelector(): void;
    toggleOption(option: any, event: any): void;
    scrollToTop(): void;
    autoScrollToNewExtraValue(): void;
    autoScrollToFirstSelectedOption(): void;
    cancel(): void;
    save(): void;
    get selectedOption(): ArOption;
    get selectedOptions(): Array<ArOption>;
    addExtraValue(): void;
    removeExtraValue(extraValue: string): void;
    stopPropagation(event: any): void;
}
export declare class FilterOptionsValueConverter {
    toView(list: Array<ArOption>, filter?: string): Array<ArOption>;
}
